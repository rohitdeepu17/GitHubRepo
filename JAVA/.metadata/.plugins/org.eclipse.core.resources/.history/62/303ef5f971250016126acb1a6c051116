import java.lang.reflect.Constructor;


public class SingletonExample {
	public static void main(String[] args){
		//This code for reflection can destroy singleton property of any of the classes till BillPughSingleton
		EagerInitializedSingleton instanceOne = EagerInitializedSingleton.getInstance();
		EagerInitializedSingleton instanceTwo = null;
		try{
			Constructor[] constructors = EagerInitializedSingleton.class.getDeclaredConstructors();
			for(Constructor constructor:constructors){
				System.out.println("inside constructor loop");
				constructor.setAccessible(true);
				instanceTwo = (EagerInitializedSingleton) constructor.newInstance();
				break;
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		System.out.println(instanceOne.hashCode());
        System.out.println(instanceTwo.hashCode());
	}
}

class EagerInitializedSingleton{
	private static final EagerInitializedSingleton instance = new EagerInitializedSingleton();
	private EagerInitializedSingleton(){}
	public static EagerInitializedSingleton getInstance(){return instance;}
}

class StaticBlockInitializationSingleton{
	private static StaticBlockInitializationSingleton instance;
	static{
		try{
			instance = new StaticBlockInitializationSingleton();
		}catch(Exception e){
			throw new RuntimeException("Exception occured in creating singleton instance");
		}
	}
	private StaticBlockInitializationSingleton(){}
	public static StaticBlockInitializationSingleton getInstance(){return instance;}
}

class LazyInitializationSingleton{
	private static LazyInitializationSingleton instance = null;
	private LazyInitializationSingleton(){}
	public static LazyInitializationSingleton getInstance(){
		if(instance == null)
			instance = new LazyInitializationSingleton();
		return instance;
	}
}

class ThreadSafeSingleton{
	private static ThreadSafeSingleton instance = null;
	private ThreadSafeSingleton(){}
	public static synchronized ThreadSafeSingleton getInstance(){
		if(instance == null)
			instance = new ThreadSafeSingleton();
		return instance;
	}
}

class ThreadSafeDoubleCheckLockingSingleton{
	private static ThreadSafeDoubleCheckLockingSingleton instance = null;
	private ThreadSafeDoubleCheckLockingSingleton(){}
	public static ThreadSafeDoubleCheckLockingSingleton getInstance(){
		if(instance == null){
			synchronized (ThreadSafeDoubleCheckLockingSingleton.class) {
				if(instance == null)
					instance = new ThreadSafeDoubleCheckLockingSingleton();
			}
		}
		return instance;
	}
}

class BillPughSingleton{
	private BillPughSingleton(){}
	private static class InnerHelper{
		private static final BillPughSingleton instance = new BillPughSingleton();
	}
	public static BillPughSingleton getInstance(){
		return InnerHelper.instance;
	}
}
